Feb 4/2006
Backfill tasks
  * redo if-statements to make them non-exponential
  * switch statements
  * single/multi statement rationalization
  * verify that comma expressions are adequately supported

James
  * type and context analysis

Greg
  * cps/while tests
  * lexer/parser improvements (for source position ranges)

Major tasks (pending)
  * exception support

Jan 3/2006
To think about:
  * Think about adding '#argument' to the end of the browser URL; newPage could take
    an extra parameter called "bookmark" or something.  This allows us to change
    the URL in the browser's address bar without causing the browser to reload the
    page (which would drop all of our internal state).  The programmer can access
    the bookmark arg as an argument to main().  This way, we provide a way to make
    certain parts of the application bookmarkable.
  * We may want to switch from specifying transforms with symbols to specifying
    transforms with class objects.  That would allow:
    - providing a transform to use for recursive calls in a slot value instead of
      assuming that we'll be using the same one.  I'm thinking in particular of
      ways to have mutually-recursive transformations without hardcoding in the
      "mutuallness".  I'm not sure that this is the best way to go about it though.
      (I think we'll need mutually recursive transformations for transforming only
      those functions that are on a call chain down to a `function_continuation`
      reference)
    - mixins!  I've already found myself kind of wishing for mixins for tracking
      visible function declarations; the CPS transformation and the TRAMPOLINE
      transformation both track function-decl visibility with identical :AROUND
      methods on the (METHOD TRANSFORM (_ LIST)) method.

Jan 3/2006:
Currently unsupported language features:
  * redo if-statements to make them non-exponential
  * switch statements
  * exception handling

Nov 25/2005
Some "someday" todos:
  * Add some convenience functions for running only tests with a specific note
  * PARSE-FILE function
  * Use COVER to check test coverage
  * Add better data-sharing mechanisms for code-walkers (ie, if all children
    come back EQ to their originals then just return the original structure/list
    instead of consing a new one)
  * TAGS-file generation scripts (one for regular tags, one for TODO/XXX only)

Nov 10/2005
The large-grain tasks that are left:
  * CPS transformation
  * "ugly-printer"
    - Most complete version requires a source-transformation for identifier names
  * Working auto-tests for each main area of functionality
  * Bare-bones framework (ie, newPage, fetchData, maybe JSON support)
===== At this point, we have a system that is usable, and therefore we have version 0.1
  * Trampolining and "smart" CPS?
  * Automated Basic HTML?
  * Server-side services with automatic integration?  (this is
    complementary to Basic HTML since they both require compilation of jwacs to Lisp)

Nov 7/2005
  * Q: Should we be using RT for testing instead of hand-rolled giant predicates? A: Yes.
  * Q: Should the tests go into a separate module/system? A: Yes.
  * parse-javascript tests need to be brought back to life (will require a struct= function)
