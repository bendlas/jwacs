//// WebIdeClient.jw
///
/// A simple web-based client for writing jwacs applications.
import "../lib/prototype.js";
import "../lib/jwacs-lib.js";

JwacsLib.initHistory();

function main()
{ }

function doLoad()
{
  try
  {
    var sourceNameElm = document.getElementById("sourceName");
    var textElm = document.getElementById("sourceText");

    //TODO prompt if unsaved
    
    var newSource = JwacsLib.fetchData("GET", "/jwacs/demos/web-ide/source/" + sourceNameElm.value);
    textElm.value = newSource;
  }
  catch(e)
  {
    alert("error: " + e);
  }
}

function updateButtons()
{
  var sourceNameElm = document.getElementById("sourceName");
  if(sourceNameElm.value.match(/\.jw$/i))
  {
    document.getElementById('compileButton').disabled = false;
    document.getElementById('runButton').disabled = false;
  }
  else
  {
    document.getElementById('compileButton').disabled = true;
    document.getElementById('runButton').disabled = true;
  }
}

function doSave()
{
  try
  {
    var sourceNameElm = document.getElementById("sourceName");
    var textElm = document.getElementById("sourceText");

    JwacsLib.sendRequest("POST", "/jwacs/demos/web-ide/source/" + sourceNameElm.value,
                         textElm.value);
  }
  catch(e)
  {
    alert(e);
  }
  //TODO update unsaved information
}

function doCompile()
{
  var sourceNameElm = document.getElementById("sourceName");
  var textElm = document.getElementById("sourceText");
  var errElm = document.getElementById('errorText');
  
  // TODO only save if unsaved
  doSave();
  
  try
  {
    var http = JwacsLib.sendRequest("POST", "/jwacs/demos/web-ide/compile/" + sourceNameElm.value,
                                   textElm.value);

    // Handle errors
    if(http.status == 409)
    {
      errElm.innerHTML = http.responseText;
      return;
    }

    if(http.status != 200)
    {
      alert("Error (" + http + "): " + http.responseText);
      return;
    }

    // Otherwise, there were no errors and we can reset the error box and return
    // the name of the application's entry URI.
    errElm.innerHTML = "<br>";
    return http.responseText;
  }
  catch(e)
  {
    if(e.http && e.http.status == 409)
      errElm.innerHTML = e.http.responseText;
    else
      alert(e);
  }
}

var appWindow = null;
function doRun()
{
  var appText = doCompile();
  if(!appText)
    return;
  
  // Insert code to set the $exHook at the very beginning of the script before loading it
  // into the appWindow
  appText = appText.replace(/<script/, "<script>var $exHook=window.opener.hookHandler;</script>" +
                            "<script");

  //TEST
  var pre = document.getElementById('appSourcePre');
  if(!pre)
  {
    pre = document.createElement("PRE");
    document.body.appendChild(pre);
  }
  pre.innerHTML = appText.replace(/</g, "&lt;");
  
  if(appWindow)
    appWindow.close();

  appWindow = window.open("about:blank", "appWindow");
	var doc = appWindow.document.open();
  doc.write(appText);
  doc.close();
  appWindow.$exHook = hookHandler;
  appWindow.focus();
}

function doEval()
{
  var elm = document.getElementById('evalInput');
  appWindow.$globalEval(elm.value);
}

function hookHandler(e, handler, handlerStack, latestStack, latestBox)
{
  var parent = document.getElementById('exceptions');
  
  var div = document.createElement("DIV");
  div.className = "exceptionDiv";
  div.appendChild(document.createTextNode("[" + dateStr(new Date) + "]: Exception '" + e + "' thrown"));

  var restartThunk = document.createElement("A");
  restartThunk.appendChild(document.createTextNode("restart thunk"));
  restartThunk.href = '#';
  restartThunk.onclick = function(evt)
  {
    Event.stop(evt);
    parent.removeChild(div);
    appWindow.$trampoline(latestBox.thunk, latestStack);
  };
  div.appendChild(document.createElement("BR"));
  div.appendChild(restartThunk);

  if(handler)
  {
    var handleException = document.createElement("A");
    handleException.appendChild(document.createTextNode("invoke handler"));
    handleException.href = '#';
    handleException.onclick = function(evt)
    {
      Event.stop(evt);
      parent.removeChild(div);
      appWindow.$trampoline(function() { resume handler <- e; });
    };
  
    div.appendChild(document.createTextNode(" | "));
    div.appendChild(handleException);
  
    var evalForm = document.createElement("FORM");
    var evalInput = document.createElement("INPUT");
    evalForm.appendChild(evalInput);
    evalInput.id = "evalInput";
    evalForm.onsubmit = function(evt) {
      Event.stop(evt);
      var evalArg = evalInput.value;
      var result = appWindow.$localEval(latestBox.thunk, latestStack, evalArg);
      evalInput.value = "";
    };
  
    div.appendChild(document.createTextNode(" |  Eval in local scope: "));
    div.appendChild(evalForm);
  }
  div.appendChild(document.createTextNode("start=" + latestBox.startPos + ", end=" + latestBox.endPos));
  parent.appendChild(div);
};

function dateStr(date)
{
  return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +
    date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
}
