//// WebIdeClient.jw
///
/// A simple web-based client for writing jwacs applications.
import "../lib/prototype.js";
import "../lib/jwacs-lib.js";
import "effects.js";
import "textarea-highlights.js";

JwacsLib.initHistory();
initHighlights();

function main()
{
}

function doLoad()
{
  try
  {
    var sourceNameElm = document.getElementById("sourceName");
    var textElm = document.getElementById("sourceText");

    //TODO prompt if changed
    
    var newSource = JwacsLib.fetchData("GET", "/jwacs/demos/web-ide/source/" + sourceNameElm.value);
    textElm.value = newSource;
    JwacsLib.newPage();
  }
  catch(e)
  {
    alert("error: " + e);
  }
}

function updateButtons()
{
  var sourceNameElm = document.getElementById("sourceName");
  if(sourceNameElm.value.match(/\.jw$/i))
    document.getElementById('runButton').disabled = false;
  else
    document.getElementById('runButton').disabled = true;
}

function doCompile()
{
  var sourceNameElm = document.getElementById("sourceName");
  var textElm = document.getElementById("sourceText");
  var errElm = document.getElementById('errorText');
  
  try
  {
    var http = JwacsLib.sendRequest("POST", "/jwacs/demos/web-ide/compile/" + sourceNameElm.value,
                                   textElm.value);

    // Handle errors
    if(http.status == 409)
    {
      Element.show(errElm);
      var match = http.responseText.match(/^(\d+):(.*)$/);
      if(match)
      {
        errElm.innerHTML = match[2];
        var ta = document.getElementById('sourceText');
        var dummy = document.getElementById('dummyDiv');
        var box = addHighlight(ta, dummy, new Number(match[1]) + 1, new Number(match[1]) + 2, 'red');
      }
      else
        errElm.innerHTML = http.responseText;
      return;
    }

    if(http.status != 200)
    {
      alert("Error (" + http + "): " + http.responseText);
      return;
    }

    // Otherwise, there were no errors and we can reset the error box and return
    // the name of the application's entry URI.
    Element.hide(errElm);
    return http.responseText;
  }
  catch(e)
  {
    if(e.http && e.http.status == 409)
      errElm.innerHTML = e.http.responseText;
    else
      alert(e);
  }
}

var appWindow = null;
function doRun()
{
  // Clean up now-invalid highlights and close the obsolete window before we compile
  if(appWindow)
    appWindow.close();
  appWindow = null;
  clearHighlights();

  document.getElementById('exceptions').innerHTML = "";
  
  var appText = doCompile();
  if(!appText)
    return;
  
  // Insert code to set the $exHook at the very beginning of the script before loading it
  // into the appWindow
  appText = appText.replace(/<script/, "<script>var $exHook=window.opener.hookHandler;</script>" +
                            "<script");

  //TEST
//   var pre = document.getElementById('appSourcePre');
//   if(!pre)
//   {
//     pre = document.createElement("PRE");
//     document.body.appendChild(pre);
//   }
//   pre.innerHTML = appText.replace(/</g, "&lt;");
  
  // We're about to throw away the running app, so none of its frames are valid anymore
  var exceptions = document.getElementById('exceptions');
  exceptions.innerHTML = "<br>"; 

  appWindow = window.open("about:blank", "appWindow");
	var doc = appWindow.document.open();
  doc.write(appText);
  doc.close();
  appWindow.$exHook = hookHandler;
  appWindow.focus();
}

function doEval()
{
  var elm = document.getElementById('evalInput');
  appWindow.$globalEval(elm.value);
}

function hookHandler(e, handler, handlerStack, latestStack, latestBox)
{
  var parent = document.getElementById('exceptions');
  
  var div = document.createElement("DIV");
  div.className = "exception frame";
  div.appendChild(document.createTextNode("[" + dateStr(new Date) + "]: Exception '" + e + "' thrown"));

  if(latestBox.startPos && latestBox.endPos)
  {
    var ta = document.getElementById('sourceText');
    var dummy = document.getElementById('dummyDiv');
    var box = addHighlight(ta, dummy, latestBox.startPos + 1, latestBox.endPos, 'orange');
  }

  var restartThunk = document.createElement("A");
  restartThunk.appendChild(document.createTextNode("restart thunk"));
  restartThunk.href = '#';
  restartThunk.onclick = function(evt)
  {
    Event.stop(evt);
    parent.removeChild(div);
    removeHighlight(box);
    appWindow.$trampoline(latestBox, latestStack);
  };
  div.appendChild(document.createElement("BR"));
  div.appendChild(restartThunk);

  if(handler)
  {
    var handleException = document.createElement("A");
    handleException.appendChild(document.createTextNode("invoke handler"));
    handleException.href = '#';
    handleException.onclick = function(evt)
    {
      Event.stop(evt);
      parent.removeChild(div);
      removeHighlight(box);
      appWindow.$invokeHandler(handler, e);
    };
  
    div.appendChild(document.createTextNode(" | "));
    div.appendChild(handleException);
  
    var evalForm = document.createElement("FORM");
    var evalInput = document.createElement("INPUT");
    evalForm.appendChild(evalInput);
    evalInput.id = "evalInput";
    evalForm.onsubmit = function(evt) {
      Event.stop(evt);
      var evalArg = evalInput.value;
      var result = appWindow.$localEval(latestBox.thunk, latestStack, evalArg);
      evalInput.value = "";
    };
  
    div.appendChild(document.createTextNode(" |  Eval in local scope: "));
    div.appendChild(evalForm);
  }
  div.appendChild(document.createTextNode("start=" + latestBox.startPos + ", end=" + latestBox.endPos));
  parent.appendChild(div);
  
  window.focus();
};

function dateStr(date)
{
  return date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + " " +
    date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds();
}
