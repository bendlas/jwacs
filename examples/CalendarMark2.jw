//// CalendarMark2.jw
///
/// A client-based implemenetation of a simple web-calendar in jwacs.
import "prototype.js";
import "jwacs-lib.jw";

JwacsLib.initHistory();

//======= Global data and main program =============================================================
var currentDate;
var firstDay;
var finalDay;

//TODO DOM-based drawing?
function main(args)
{
  var date = new Date;

  if(!isNaN(args.month))
    date.setMonth(args.month - 1);
  if(!isNaN(args.year))
    date.setYear(args.year);

  var year = date.getFullYear();
  var month = date.getMonth();
  
  showCalendarScreen(year, month);
}

function showCalendarScreen(year, month)
{
  document.title = monthNames[month] + " " + year;

  var output = "";
  output += "<h2 id='monthTitle'>" + monthNames[month] + " " + year + "</div>";
  output += calcNavigationLinks(year, month);
  output += calcMonthHtml(year, month);
  output += calcNavigationLinks(year, month);
  output += calcBottomControls(year, month);
  
  $('contentDiv').innerHTML = output;

  // Figure out the start and end days of this month's rectangle
  var s = new Date(year, month, 1);
  while(s.getDay() != 0)
    s.setDate(s.getDate() - 1);
  var e = new Date(year, month, lastDay(year, month));
  while(e.getDay() != 6)
    e.setDate(e.getDate() + 1);
    
  var events = readEvents(s, e);
  for(var i = 0; i < events.length; i++)
    showEvent(events[i]);
}

/// Converts text containing rows of CSV data into an Array of Objects
function unpackRows(text)
{
	var result = new Array;
	if(text != null && text != undefined)
	{
		lines = text.split(/\r?\n/);
		if(lines && lines.length > 1)
		{
			// First line holds the field names
			var headings = lines[0].split(",");
			
			// Each subsequent row is an object
			var i;
			for(i = 1; i < lines.length; i++)
			{
				var line = lines[i];
				var fields = line.split(",");
				if(fields && fields.length > 0)
				{
					var obj = new Object;
					for(var j = 0; j < fields.length; j++)
					{
						obj[unescape(headings[j])] = unescape(fields[j]);
					}
					result[result.length] = obj;
				}
			}
		}
	}

	return result;
}

function pad(num, width)
{
	var ret = new String(num);
	
	while(ret.length < width)
		ret = "0" + ret;
	
	return ret;
}

//// ======= Date handling =========================================================================

var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

function strToDate(str)
{
  try
  {
    var components = str.split("-");
    var yyyy = new Number(components[0]);
    var mm = new Number(components[1]);
    var dd = new Number(components[2]);
	
    return new Date(yyyy, mm - 1, dd);
  }
  catch(e)
  {
    throw "error in strToDate(" + str + "):\n" + e;
  }
}

function dateToStr(date)
{
	return date.getFullYear() + "-" + pad(date.getMonth() + 1, 2) + "-" + pad(date.getDate(), 2);
}

function equalDates(date1, date2)
{
	return date1.getFullYear() == date2.getFullYear() &&
				 date1.getMonth() == date2.getMonth() &&
				 date1.getDate() == date2.getDate();
}

/// Returns the last day of month `month` in year `year`
function lastDay(year, month)
{
	var now = new Date;
	var yyyy = new Number(year);
	var mm = new Number(month);
	
	if(isNaN(yyyy) || yyyy < 1901)
		yyyy = now.getFullYear();
		
	if(isNaN(mm) || mm < 1 || mm > 12)
		mm = now.getMonth() + 1;
		
	var dd = 28;
	var testDate = new Date(yyyy, mm - 1, dd);
	while(testDate.getMonth() == mm - 1)
	{
		dd++;
		testDate = new Date(yyyy, mm - 1, dd);
	}
	
	return dd - 1;
}

// Number of rows required to display month
function rowsRequired(year, month)
{
	var first = new Date(year, month, 1);
  
	// February
	if(first.getMonth() == 1)
	{
		return 5;
	}
	
	var last = new Date(first.getTime());
	last.setDate(31);
	
	// 31-day months
	if(last.getDate() == 31)
	{
		if(first.getDay() == 5 || first.getDay() == 6)
			return 6;
		else
			return 5;
	}
	else
	{
		if(first.getDay() == 6)
			return 6;
		else
			return 5;
	}
}

//// ======= Drawing ===============================================================================

function calcNavigationLinks(year, month)
{
  var output = "";

  var prev = new Date(year, month - 1, 1);
  var next = new Date(year, month + 1, 1);

  output += "<table width='90%' align='center' border='0px'><tr>";
  output +=
    "<td><a class='navLink' " +
    "onClick='jump(" + prev.getFullYear() + "," + prev.getMonth() + ");'>" +
    "&lt;--- " +
    monthNames[prev.getMonth()] + " " + prev.getFullYear() +
    "</a></td>";
  output +=
    "<td align='right'><a class='navLink' " +
    "onClick='jump(" + next.getFullYear() + "," + next.getMonth() + ");'>" +
    monthNames[next.getMonth()] + " " + next.getFullYear() +
    " ---&gt;"+
    "</a></td>";
  output += "</tr></table>";

  return output;
}

function calcBottomControls(year, month)
{
  var output = "";

  output = "<table width='90%' align='center' border='0px'><tr>";
  output += "<td><a onclick='eventEdit(this);' class='navLink'>Add new event</a></td>";
  output += "<td align='right'><form id='jumpForm' action='javascript: jumpFormSubmitted();'>";

  output += "<select id='jumpMonth' onChange='jumpFormSubmitted(); return true;'>";
  for(var m = 0; m < 12; m++)
  {
    output += "<option value = '" + m + "'";
    if(m == month)
      output += " selected";
    output += ">" + monthNames[m] + "</option>";
  }
  output += "</select>";

  output += "<input id='jumpYear' size='4' value='" + year + "'>";
  output += "</form></td></tr></table>";

  return output;
}
      
function calcMonthHtml(year, month)
{
  var output = "";

  output += "<table align='center' id='monthTable'>";

	var row=0;
	var col=0;

	//// Headers
	output += "<tr>";
	for(col=0; col < 7; col++)
	{
		output += "<th>" + dayNames[col] + "</th>";
	}
	output += "</tr>";
  
	//// Cells

  // Back up from the first day of the month to a Sunday
  var d = new Date(year, month, 1);
  while(d.getDay() != 0)
  {
    d.setDate(d.getDate() - 1);
  }

  var rowCount = rowsRequired(year, month);
  for(row=0; row < rowCount; row++)
	{
		output += "<tr class='dataRow'>";
		for(col = 0; col < 7; col++)
		{
			var idx = row * 7 + col;
			output += calcDayHtml(d, month);
      d.setDate(d.getDate() + 1);
		}
		output += "</tr>";
	}
	output += "</table>";

  return output;
}

// Calculate a fragment of HTML that represents a day cell in the month table
function calcDayHtml(date, currentMonth)
{
  var output = "<td ondblclick='eventEdit(this);' id='" + dateToStr(date) + "' ";

  if(currentMonth == date.getMonth())
    output += "class='sameMonthDay'";
  else
    output += "class='otherMonthDay'";

  output += ">";
  
  output += "<div class='dayHeader'>";
  if(equalDates(date, new Date))
  {
    output += "<span class='todayDay'>";
    output += date.getDate();
    output += "</span>";
  }
  else
  {
    output += date.getDate();
  }

  output += "</div>";
  output += "</td>";
  
  return output;
}
  
function showEvent(event)
{
  var eventID = 'event' + event.id;
  var cellID = event.date;

  // If the date that this event occurs on is not visible, just bail
  var target = $(cellID);
  if(!target)
    return;
  
  var eventBox = document.createElement("DIV");
  eventBox.className = "eventBox";
  eventBox.id = eventID;
  eventBox.innerHTML = event.desc.escapeHTML();
  eventBox.onclick = function() { eventEdit(this); };
    
  var existing = $('event' + event.id);
  if(existing)
  {
    // If we're changing but staying in the same day, then just replace the old node
    if(existing.parentNode.id == cellID)
      existing.parentNode.replaceChild(eventBox, existing);

    // Otherwise we're changing days, so remove the old node and create a new one under the new day
    else
    {
      existing.parentNode.removeChild(existing);
      target.appendChild(eventBox);
    }
  }
  else
    target.appendChild(eventBox);
}

function addStatus(str)
{
  var statusDiv = $('StatusDisplay');
  if(!statusDiv)
    return;
  
  statusDiv.innerHTML = str.escapeHTML();
  statusDiv.style.display = '';
}

function removeStatus(str)
{
  var statusDiv = $('StatusDisplay');
  if(!statusDiv)
    return;
  
  statusDiv.style.display = 'none';
}

function calcEventEditHtml(event)
{
  var output = "";
  var pageLoaded = 'window.focus(); document.getElementById("eventDesc").focus();';
  output += "<body style='width:90%' onload='" + pageLoaded + "'>";

  // Draw the title
  output += "<span style='text-align:left;font-family:Verdana,Arial;font-size:16pt;'>";
  if(event.desc)
  {
    output += "Edit event</span> ";
    output += "<small>[<a style='color:blue; cursor: pointer;' " +
      "onclick='window.opener.maybeDelete(window, document);'>" +
      "delete</a>]</small>";
  }
  else
    output += "Add new event</span>";

	output += "<form id='eventEditForm' action='javascript:window.opener.eventEditFormSubmitted(window, document);'>";

  // Save the id, if any
  output += "<input id='eventID' type='hidden' value='";
  if(event.id)
    output += event.id;
  output += "'>";
  
	// draw the description
	output += "<input id='eventDesc' type='text' size='50'";
	if(event.desc)
		output += 'value="' + event.desc.escapeHTML() + '"';
	output += ">";

	// draw the dates
	output += "<br>";
  var eventDate = strToDate(event.date);
  output += "<input id='eventYear' type='text' size='4' value='" + eventDate.getFullYear() + "'>";
  output += "-";
  output += "<input id='eventMonth' type='text' size='2' value='" + (eventDate.getMonth() + 1) + "'>";
  output += "-";
  output += "<input id='eventDay' type='text' size='2' value='" + eventDate.getDate() + "'>";
  output += "<small><i>yyyy-mm-dd</i></small>";

	// draw the notes area
	output += "<p>";
	output += "<b>Notes</b><br>";
	output += "<textarea id='eventNotes' cols='40' rows='10'>";
	if(event.notes)
		output += event.notes.escapeHTML();
	output +=  "</textarea>";

	output += "<input type='submit' value='save'>";
	output += "</form>";
  output += "</body>";
  
	return output;
}

// ======= Server calls ============================================================================

//TODO These functions are all extremely similar.  Surely they can be factored into one or two
// calls.

function readEvents(s, e)
{
  var q = "/calendar/event-query" +
      "?s=" + dateToStr(s) +
      "&e=" + dateToStr(e);
  var status = "Fetching events";
  
  try
  {
    addStatus(status);
    var text = JwacsLib.fetchData("GET", q);
    removeStatus(status);
    return unpackRows(text);
  }
  catch(e)
  {
    removeStatus(status);
    alert("sorry, the attempt to read event data failed");
  }
}

function fetchEvent(eventID)
{
  var q = "/calendar/event-query" +
    "?id=" + escape(eventID);
  var status = "Fetching event #" + eventID;
  
  try
  {
    addStatus(status);
    var text = JwacsLib.fetchData("GET", q);
    removeStatus(status);
    return unpackRows(text)[0];
  }
  catch(e)
  {
    removeStatus(status);
    alert("sorry, the attempt to read event data failed");
  }
}

function addEvent(event)
{
  var q = "/calendar/event-add" +
    "?date=" + escape(event.date) +
    "&desc=" + escape(event.desc) +
    "&notes=" + escape(event.notes);
  var status = "Saving new event";

  try
  {
    addStatus(status);
    var text = JwacsLib.fetchData("POST", q);
    removeStatus(status);
    return unpackRows(text)[0];
  }
  catch(e)
  {
    removeStatus(status);
    alert("sorry, the attempt to save event data failed");
  }
}

function updateEvent(event)
{
  var q = "/calendar/event-update" +
    "?id=" + escape(event.id) +
    "&date=" + escape(event.date) +
    "&desc=" + escape(event.desc) +
    "&notes=" + escape(event.notes);
  var status = "Updating event #" + event.id;

  try
  {
    addStatus(status);
    var text = JwacsLib.fetchData("POST", q);
    removeStatus(status);
    return unpackRows(text)[0];
  }
  catch(e)
  {
    removeStatus(status);
    alert("sorry, the attempt to update event data failed");
  }
}

function deleteEvent(eventID)
{
  var q = "/calendar/event-del?id=" + eventID;
  var status = "Deleting event #" + eventID;

  try
  {
    addStatus(status);
    var text = JwacsLib.fetchData("POST", q);
    removeStatus(status);
    return text == "OK";
  }
  catch(e)
  {
    removeStatus(status);
    alert("sorry, the attempt to delete the event failed");
  }
}

// ======= Event handlers =========================================================================
function jump(year, month)
{
  var m = new Number(month);
  JwacsLib.newPage(monthNames[m] + " " + year, {year: year, month: m + 1});
  showCalendarScreen(year, m);
}

function jumpFormSubmitted()
{
  var year = $F('jumpYear');
  var month = $F('jumpMonth');
  jump(year, month);
}

function eventEdit(elm)
{
  //TODO Don't clobber the existing event if it's unsaved
  var event = {date: dateToStr(new Date)};
  if(elm.id)
  {
    var aMatch = elm.id.match(/^event(\d+)/);
    if(aMatch)
    {
      // Edit event
      event = fetchEvent(aMatch[1]);
    }
    else
    {
      // Add new event
      event = {date: elm.id};
    }
  }

	var child = window.open("about:blank", "addEvent", "width=400,height=500,toolbar=no,top=100,left=100");
	var doc = child.document.open();
  doc.write(calcEventEditHtml(event));
  doc.close();
  if(event.desc)
    doc.title = "Edit event";
  else
    doc.title = "Add new event";
}

function eventEditFormSubmitted(child, doc)
{
  var eventID = doc.getElementById('eventID').value;
  var eventDesc = doc.getElementById('eventDesc').value;
  var eventDate = 
    doc.getElementById('eventYear').value + "-" +
    doc.getElementById('eventMonth').value + "-" +
    doc.getElementById('eventDay').value;

  var eventNotes = doc.getElementById('eventNotes').value;
  //TODO: Validate

  var updatedEvent;
  if(eventID)
    updatedEvent = updateEvent({id: eventID, date: eventDate, desc: eventDesc, notes: eventNotes});
  else
    updatedEvent = addEvent({date: eventDate, desc: eventDesc, notes: eventNotes});

  showEvent(updatedEvent);
  
  // Firefox 1.0 doesn't seem to like it (and expresses this dislike by
  // crashing) if you try to close the child window from an XHR response thread
  // (which is where this code here executes, since addEvent and updateEvent are
  // both faux-blocking calls that resume their continuations in the
  // onReadyStateChange handler of an XHR object), so we add the yieldThread
  // call to force ourselves back onto the GUI thread.
  JwacsLib.yieldThread();
  child.close();
}

function maybeDelete(child, doc)
{
  var desc = doc.getElementById('eventDesc').value;
  var eventID = doc.getElementById('eventID').value;
  
  var shouldDelete = confirm("Really delete '" + desc + "'?");
	if(shouldDelete)
	{
		deleteEvent(eventID);

    var eventElm = $('event' + eventID);
    if(eventElm)
      eventElm.parentNode.removeChild(eventElm);
    JwacsLib.yieldThread();
    child.close();
	}
	else
	{
    child.focus();
		doc.getElementById('eventNotes').focus();
	}
}

